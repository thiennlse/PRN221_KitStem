// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(KitStemDBContext))]
    [Migration("20240926030459_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KitId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("kit_id");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart_Items", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KitId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("kit_id");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("BusinessObject.Models.HelpHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("StepId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("step_id");

                    b.Property<int?>("UserLabId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_lab_id");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("UserLabId");

                    b.ToTable("Help_Histories", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.KitOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KitId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("kit_id");

                    b.Property<int?>("OrderId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("OrderId");

                    b.ToTable("Kit_Orders", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.KitStem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Attribute")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("attribute");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("Kit_Stems", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("KitId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("kit_id");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDay")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("create_day");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<DateTime?>("OrderDay")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("order_day");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("StaffId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int?>("Status")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double?>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BusinessObject.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("LabId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("Role")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<byte?>("Status")
                        .IsRequired()
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.UserLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("LabId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Labs", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CartItem", b =>
                {
                    b.HasOne("BusinessObject.Models.KitStem", "Kit")
                        .WithMany("CartItems")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Cart_Item__kit_i__36B12243");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Cart_Item__user___35BCFE0A");

                    b.Navigation("Kit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Favorite", b =>
                {
                    b.HasOne("BusinessObject.Models.KitStem", "Kit")
                        .WithMany("Favorites")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__kit_i__412EB0B6");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__user___403A8C7D");

                    b.Navigation("Kit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.HelpHistory", b =>
                {
                    b.HasOne("BusinessObject.Models.Step", "Step")
                        .WithMany("HelpHistories")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Help_Hist__step___32E0915F");

                    b.HasOne("BusinessObject.Models.UserLab", "UserLab")
                        .WithMany("HelpHistories")
                        .HasForeignKey("UserLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Help_Hist__user___31EC6D26");

                    b.Navigation("Step");

                    b.Navigation("UserLab");
                });

            modelBuilder.Entity("BusinessObject.Models.KitOrder", b =>
                {
                    b.HasOne("BusinessObject.Models.KitStem", "Kit")
                        .WithMany("KitOrders")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Kit_Order__kit_i__3D5E1FD2");

                    b.HasOne("BusinessObject.Models.Order", "Order")
                        .WithMany("KitOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Kit_Order__order__3C69FB99");

                    b.Navigation("Kit");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Models.Lab", b =>
                {
                    b.HasOne("BusinessObject.Models.KitStem", "Kit")
                        .WithMany("Labs")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Labs__kit_id__286302EC");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Orders__user_id__398D8EEE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Step", b =>
                {
                    b.HasOne("BusinessObject.Models.Lab", "Lab")
                        .WithMany("Steps")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Steps__lab_id__2B3F6F97");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("BusinessObject.Models.UserLab", b =>
                {
                    b.HasOne("BusinessObject.Models.Lab", "Lab")
                        .WithMany("UserLabs")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__User_Labs__lab_i__2F10007B");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("UserLabs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__User_Labs__user___2E1BDC42");

                    b.Navigation("Lab");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.KitStem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("KitOrders");

                    b.Navigation("Labs");
                });

            modelBuilder.Entity("BusinessObject.Models.Lab", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("UserLabs");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.Navigation("KitOrders");
                });

            modelBuilder.Entity("BusinessObject.Models.Step", b =>
                {
                    b.Navigation("HelpHistories");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("UserLabs");
                });

            modelBuilder.Entity("BusinessObject.Models.UserLab", b =>
                {
                    b.Navigation("HelpHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
